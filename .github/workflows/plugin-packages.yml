# CI WorkFlow for build, test and release of Plugin Packages
name: Plugin Packages CI
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - 'plugins/**'
      - 'hack/validate-plugin-manifests.sh'
      - 'hack/update-plugin-manifests.sh'
      - 'hack/update-tvk-oneclick-manifests.sh'
      - '.github/workflows/plugin-manifests.yml'

env:
  GKE_CLUSTER: ci-cluster
  GKE_ZONE: us-east1-b

jobs:
  # pre-build job runs yaml lint, shell lint, golangci-lint and detects file changes to sets job variables which will be used to
  # decide whether to run subsequent jobs(build_test_preflight, build_test_cleanup, build_test_log-collector and build_test_target-browser)
  pre-build:
    runs-on: ubuntu-latest
    outputs:
      oneclick: ${{ steps.filter.outputs.oneclick }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run yamllint
        uses: reviewdog/action-yamllint@v1
        with:
          fail_on_error: true
          reporter: local
          filter_mode: nofilter

      - name: Run Shell lint
        run: make shell-lint

      - name: Verify code patterns
        run: make verify-code-patterns

      - name: Detect File Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shared: &shared
              - 'Makefile'
              - 'hack/**'
              - '.goreleaser.yml'
              - '.github/workflows/plugin-packages.yml'
            
            testTargetBrowser:
              - *sharedTargetBrowser
            sharedOneclick: &sharedOneclick
              - *shared
              - 'tools/tvk-oneclick/**'
              - 'tests/tvk-oneclick/**'
            oneclick:
              - *sharedOneclick
              - '.krew/tvk-oneclick.yaml'
            testoneclick:
              - *sharedOneclick


  # build_test_tvk_oneclick job build tvk-oneclick packages, runs integration tests and tests packages for plugin creation(install, uninstall)
  # upload tvkoneclick packages to github artifacts if tags('/ref/tags') are pushed
  build_test_tvk_oneclick:
    runs-on: ubuntu-latest
    needs: pre-build
    # for tags('ref/tags/'), 'needs.pre-build.outputs.oneclick' will be 'false' so to run 'build_test_preflight' job on tags as well,
    # added condition 'startsWith(github.ref, 'refs/tags/')'
    if: (needs.pre-build.outputs.oneclick == 'true') || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Tvk-oneclick Package
        run: make build-tvk-oneclick

      - name: Set up Cloud SDK
        if: (needs.pre-build.outputs.testoneclick == 'true') || startsWith(github.ref, 'refs/tags/')
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true

      - name: Authenticate and Connect to GKE cluster
        if: (needs.pre-build.outputs.testoneclick == 'true') || startsWith(github.ref, 'refs/tags/')
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          use_auth_provider: true
          credentials: ${{ secrets.GKE_SA_KEY }}

      #- name: Update 'input_config'
      #  run: |
      #    echo "Updating 'tests/tvk-oneclick/input_config to run tvk-oneclick"
      #    sed -i "s/^\(nfs_path\s*=\s*\).*$/\1\'\/src\/nfs\/kubedata\'/" tests/tvk-oneclick/input_config
      #    nfs_server=${{ secrets.NFS_SERVER_IP }}
      #    sed -i "s/^\(nfs_server\s*=\s*\).*$/\1\'$nfs_server\'/" tests/tvk-oneclick/input_config

      #- name: Run Tvk-oneclick Integration Tests
      #  if: (needs.pre-build.outputs.testoneclick == 'true') || startsWith(github.ref, 'refs/tags/')
      #  run: make test-tvk_oneclick-integration
      #  env:
      #    nfs_server_ip: ${{ secrets.NFS_SERVER_IP }}
      #    build_id: tvk-oneclick-${{ github.run_id }}

      - name: Ensure Required Utilities Installed
        run: make install-required-utilities

      - name: Test tvk_oneclick Plugin Locally
        run: make test-tvk-oneclick-plugin-locally

      - name: Upload  Tvk-oneclick Plugin Packges to github artifact
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: tvk-oneclick
          path: |
            build/tvk-oneclick.tar.gz
            build/tvk-oneclick-sha256.txt

  # pre-release job determines whether to create release or not and sets job variables which will be used to decide
  # what packages(preflight, cleanup, log-collector, target-browser) should be included in release
  pre-release:
    runs-on: ubuntu-latest
    needs: [build_test_tvk_oneclick]
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      create_release: ${{ steps.detect_changes.outputs.create_release }}
      release_tvk_oneclick: ${{ steps.detect_changes.outputs.release_tvk_oneclick }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine File Changes for Release
        id: detect_changes
        run: hack/check-git-diff-between-tags.sh

  # release job creates and uploads release on github. Also, decides which package to include in release based on conditional constructs
  release:
    runs-on: ubuntu-latest
    needs: pre-release
    if: needs.pre-release.outputs.create_release == 'true' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download All Plugin Packages from Artifacts
        uses: actions/download-artifact@v2
        if: needs.pre-release.outputs.release_tvk_oneclick == 'true'
        with:
          path: build

      - name: Update GoReleaser Config for Release
        run: hack/update-goreleaser-yaml.sh
        env:
          release_tvk_oneclick: ${{needs.pre-release.outputs.release_tvk_oneclick }}

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Release with GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist --skip-validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
