# CI WorkFlow for build, test and release of Plugin Packages
name: Plugin Packages CI
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - 'plugins/**'
      - 'hack/validate-plugin-manifests.sh'
      - 'hack/update-plugin-manifests.sh'
      - 'hack/update-tvk-oneclick-manifests.sh'
      - '.github/workflows/plugin-manifests.yml'
      - 'hack/**'

env:
  GKE_CLUSTER: tvk-interop-ci
  GKE_ZONE: us-east1-b
  GKE_ENDPOINT: "https://storage.googleapis.com"
  OCP_SERVER: "https://api.etcd-bkrest2.kochavara.com:6443"
  OCP_USER: kubeadmin
  OCP_TARGET: etcd-testtestclus
  OCP_TARGET_NS: tvk
  RKE_CLUSTER: etcd-test-cluster1
  RANCHER_URL: https://54.147.241.125/
  RKE_TARGET: rke-etcd-backup-restore-test
  RKE_TARGET_NS: default

jobs:
  # pre-build job runs yaml lint, shell lint, golangci-lint and detects file changes to sets job variables which will be used to
  # decide whether to run subsequent jobs(build_test_preflight, build_test_cleanup, build_test_log-collector and build_test_target-browser)
  pre-build:
    runs-on: ubuntu-latest
    outputs:
      oneclick: ${{ steps.filter.outputs.oneclick }}
      testoneclick: ${{ steps.filter.outputs.testoneclick }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run yamllint
        uses: reviewdog/action-yamllint@v1
        with:
          fail_on_error: true
          reporter: local
          filter_mode: nofilter

      - name: Run goenv
        uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1' # The Go version to download (if necessary) and use.

      - name: Run Shell lint
        run: make shell-lint

      - name: Run Pylint
        uses: gabriel-milan/action-pylint@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          path: "./*.py" # Glob pattern for files to lint
          fail: true # Fail the action if pylint errors are found
          pr-message: true # Send a PR message if pylint errors are found

      - name: Verify code patterns
        run: make verify-code-patterns

      - name: Detect File Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shared: &shared
              - 'Makefile'
              - 'hack/**'
              - '.goreleaser.yml'
              - '.github/workflows/plugin-packages.yml'
            sharedOneclick: &sharedOneclick
              - *shared
              - 'tools/tvk-oneclick/**'
              - 'tests/tvk-oneclick/**'
            oneclick:
              - *sharedOneclick
              - '.krew/tvk-oneclick.yaml'
            testoneclick:
              - *sharedOneclick


  # build_test_tvk_oneclick job build tvk-oneclick packages, runs integration tests and tests packages for plugin creation(install, uninstall)
  # upload tvkoneclick packages to github artifacts if tags('/ref/tags') are pushed
  build_test_tvk_oneclick:
    runs-on: ubuntu-latest
    needs: pre-build
    # for tags('ref/tags/'), 'needs.pre-build.outputs.oneclick' will be 'false' so to run 'build_test_preflight' job on tags as well,
    # added condition 'startsWith(github.ref, 'refs/tags/')'
    if: (needs.pre-build.outputs.oneclick == 'true') || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Tvk-oneclick Package
        run: make build-tvk-oneclick

      - name: Set up Cloud SDK
        if: (needs.pre-build.outputs.testoneclick == 'true') || startsWith(github.ref, 'refs/tags/')
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true

      - name: Authenticate and Connect to GKE cluster
        if: (needs.pre-build.outputs.testoneclick == 'true') || startsWith(github.ref, 'refs/tags/')
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          use_auth_provider: true
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Update 'input_config'
        run: |
          echo "Updating 'tests/tvk-oneclick/input_config to run tvk-oneclick"
          access_key=${{ secrets.ACCESSKEY }}
          sed -i "s/^\(access_key\s*=\s*\).*$/\1\'$access_key\'/" tests/tvk-oneclick/input_config
          secret_key=${{ secrets.SECRETKEY }}
          sed -i "s/^\(secret_key\s*=\s*\).*$/\1\'$secret_key\'/" tests/tvk-oneclick/input_config


      - name: Ensure Required Utilities Installed
        run: make install-required-utilities

      - name: Test tvk_oneclick Plugin Locally
        run: make test-tvk-oneclick-plugin-locally

      - name: Upload  Tvk-oneclick Plugin Packges to github artifact
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: tvk-oneclick
          path: |
            build/tvk-oneclick.tar.gz
            build/tvk-oneclick-sha256.txt

  build_ocp_binary:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['self-hosted', 'macos-latest']
    needs: pre-build
    steps:
    - name: Force Install GIT Latest
      run: |
        if [ ${{ runner.os }} == "Linux" ]; then
          sudo apt-get install -y software-properties-common \
          && sudo apt-get update \
          && sudo add-apt-repository -y ppa:git-core/ppa \
          && sudo apt-get update \
          && sudo apt-get install -y git \
          && sudo apt-get install python3-pip
        fi
    - uses: actions/checkout@v2
    - name: Set up python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - name: Install oc
      uses: redhat-actions/oc-installer@v1
      with:
        oc_version: '4.6'
    - name: Install Dependencies
      run: |
        if [ ${{ runner.os }} == "Linux" ]; then
          sudo python3 -m pip install --upgrade pip
          sudo pip install coverage pytest
          if  [ -f tools/ocp_etcd_backup_plugin/requirements.txt ]; then sudo pip install -r tools/ocp_etcd_backup_plugin/requirements.txt --ignore-installed; fi
        else
          python -m pip install --upgrade pip
          pip install coverage pytest
          if  [ -f tools/ocp_etcd_backup_plugin/requirements.txt ]; then pip install -r tools/ocp_etcd_backup_plugin/requirements.txt; fi
        fi
    - name: Remove build and dist Directory
      run: sudo make clean
    - name: Run package creation
      run: |
        sudo pip install pyinstaller==4.7
    - name: Build With pyinstaller
      run: |
        sudo pyinstaller tools/ocp_etcd_backup_plugin/ocp-etcd-backup-restore.py
    - name: Clean build directory
      run: sudo make clean-build
    - name: Build ocp_etcd_backup_restore Package
      run: make build-ocp_etcd_backup_restore
      env:
        platform: ${{ runner.os }}
    - name: Change permission
      run: |
        if [ ${{ runner.os }} == "Linux" ]; then
          sudo chmod -R 777 /home/trilio/actions-runner-interop
        fi
    - name: Archive package
      uses: actions/upload-artifact@v2
      with:
        name: ocp_etcd_backup_restore
        path: |
          build/ocp-etcd-backup-restore-${{ runner.os }}.tar.gz

  build_ocp:
    runs-on: self-hosted
    needs: [build_ocp_binary]
    steps:
    - uses: actions/checkout@v2
    - name: Download All Plugin Packages from Artifacts
      uses: actions/download-artifact@v2
      with:
        path: build
    - name: Build checksum ocp-etcd-backup-restore Package
      run: make build-checksum-ocp_etcd_backup_restore
    - name: Install Dependencies
      run: |
        sudo python3 -m pip install --upgrade pip
        sudo pip install coverage pytest
        if  [ -f tools/ocp_etcd_backup_plugin/requirements.txt ]; then sudo pip install -r tools/ocp_etcd_backup_plugin/requirements.txt --ignore-installed; fi
    #- name: Run Ocp ETCD backup restore Integration Test
    #  run: |
    #    if [ ${{ runner.os }} == "Linux" ]; then
    #      pytest tests/ocp_etcd_backup_restore/test.py --server ${{ env.OCP_SERVER }} --user ${{ env.OCP_USER }}  --passwd ${{ secrets.OCP_PASSWORD }} --target-name ${{ env.OCP_TARGET }} --target-namespace ${{ env.OCP_TARGET_NS }}
    #    fi
    - name: Change permission
      run: |
        if [ ${{ runner.os }} == "Linux" ]; then
          sudo chmod -R 777 /home/trilio/actions-runner-interop
        fi
    - name: Ensure Required Utilities Installed
      run: sudo make install-required-utilities
    - name: Test ocp_etcd_backup_restore Plugin Locally
      run: make test-ocp-etcd-backup-restore-locally
    - name: Upload checksum
      uses: actions/upload-artifact@v2
      with:
        name: ocp_etcd_backup_restore
        path: |
          build/ocp-etcd-backup-restore-**.txt

  build_rke_binary:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
    needs: pre-build
    steps:
    - uses: actions/checkout@v2
    - name: Set up python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage pytest
        if  [ -f tools/rke_etcd_backup_plugin/requirements.txt ]; then pip install -r tools/rke_etcd_backup_plugin/requirements.txt; fi
    - name: Remove build and dist directory
      run: make clean
    - name: Run package Creation
      run: |
        pip install pyinstaller
    - name: Build with Pyinstaller
      run: |
        pyinstaller tools/rke_etcd_backup_plugin/rke-etcd-backup-restore.py
    - name: Clean build Directory
      run: make clean-build
    - name: Build rke-etcd-backup-restore Package
      run: make build-rke_etcd_backup_restore
      env:
        platform: ${{ runner.os }}
    - name: Archive package
      uses: actions/upload-artifact@v2
      with:
        name: rke_etcd_backup_restore
        path: |
          build/rke-etcd-backup-restore-${{ runner.os }}.tar.gz

  build_rke:
    runs-on: ubuntu-latest
    needs: [build_rke_binary]
    steps:
    - uses: actions/checkout@v2
    - name: Download All Plugin Packages from Artifacts
      uses: actions/download-artifact@v2
      with:
        path: build
    - name: Build checksum rke-etcd-backup-restore Package
      run: make build-checksum-rke_etcd_backup_restore
    - name: Install dependencies
      run: |
        sudo apt install python3-testresources
        python -m pip install --upgrade pip
        pip install coverage pytest
        if  [ -f tools/rke_etcd_backup_plugin/requirements.txt ]; then pip install -r tools/rke_etcd_backup_plugin/requirements.txt; fi
    - name: Run rke etcd backup restore Integration Tests
      run: |
        if [ ${{ runner.os }} == "Linux" ]; then
          pytest tests/rke_etcd_backup_restore/test.py --rancher-url ${{ env.RANCHER_URL }} --bearer-token ${{ secrets.BEARER_TOKEN }} --target-namespace ${{ env.RKE_TARGET_NS }} --target-name ${{ env.RKE_TARGET }} --cluster-name ${{ env.RKE_CLUSTER }} --target-secretkey ${{ secrets.RKE_TARGET_KEY }}
        fi
    - name: Ensure Required Utilities Installed
      run: make install-required-utilities
    - name: Test rke_etcd_backup_restore Plugin Locally
      run: make test-rke-etcd-backup-restore-locally
    - name: Upload checksum
      uses: actions/upload-artifact@v2
      with:
        name: rke_etcd_backup_restore
        path: |
          build/rke-etcd-backup-restore-**.txt

  # pre-release job determines whether to create release or not and sets job variables which will be used to decide
  # what packages(tvk-oneclick) should be included in release
  pre-release:
    runs-on: ubuntu-latest
    needs: [build_test_tvk_oneclick, build_rke, build_ocp]
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      create_release: true
      release_tvk_oneclick: ${{ steps.detect_changes.outputs.release_tvk_oneclick }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

  # release job creates and uploads release on github. Also, decides which package to include in release based on conditional constructs
  release:
    runs-on: ubuntu-latest
    needs: pre-release
    if: needs.pre-release.outputs.create_release == 'true' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download All Plugin Packages From Artifacts
        uses: actions/download-artifact@v2
        with:
          path: build

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          prerelease: true
          #artifacts: "build/tvk-oneclick/tvk-oneclick-sha256.txt, build/tvk-oneclick/tvk-oneclick.tar.gz, build/ocp_etcd_backup_restore/ocp-etcd-backup-restore-sha256.txt, build/ocp_etcd_backup_restore/ocp-etcd-backup-restore.tar.gz, build/rke_etcd_backup_restore/rke-etcd-backup-restore-sha256.txt, build/rke_etcd_backup_restore/rke-etcd-backup-restore.tar.gz"
          artifacts: "build/tvk-oneclick/*, build/ocp_etcd_backup_restore/*, build/rke_etcd_backup_restore/*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
